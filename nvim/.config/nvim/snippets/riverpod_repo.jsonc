{
  "Repository": {
    "prefix": "repo-riverpod",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
      "  final HttpClientRepository _http;",
      "  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(this._http);",
      "",
      "}",
      "",
      "final ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Provider = Provider<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}>((ref) {",
      "  return ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(ref.watch(httpClientRepositoryProvider));",
      "});",
    ],
  },
  "CrudRepo": {
    "prefix": "crud-repo",
    "body": [
      "import \"package:donut_ai/src/core/core.dart\";",
      "import \"package:donut_ai/src/modules/food/domain/food_log_model.dart\";",
      "import \"package:donut_ai/src/modules/startup/data/http_client_repository.dart\";",
      "import \"package:flutter_riverpod/flutter_riverpod.dart\";",
      "",
      "class ${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Repository/} {",
      "  final HttpClientRepository _http;",
      "  ${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Repository/}(this._http);",
      "",
      "  Future<List<${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Model/}>> getAll({",
      "    required int page,",
      "    required int limit,",
      "  }) async {",
      "    final response = await _http.get<Map>(",
      "      ApiEndpoints.${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}/}.list,",
      "      queryParameters: {",
      "        \"page\": page.toString(),",
      "        \"limit\": limit.toString(),",
      "      },",
      "    );",
      "",
      "    return (response.payload[\"data\"] as List)",
      "        .map((e) => ${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Model/}.fromJson((e as Map).cast()))",
      "        .toList();",
      "  }",
      "",
      "  Future<void> add(${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Model/} data) {",
      "    return _http.post(",
      "      ApiEndpoints.${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}/}.list,",
      "      data: data.toJson(),",
      "    );",
      "  }",
      "",
      "  Future<void> update(${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Model/} data) {",
      "    assert(data.id != null, \"ID must not be null for update\");",
      "",
      "    return _http.put(",
      "      ApiEndpoints.${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}/}.withId(data.id!),",
      "      data: data.toJson()..removeWhere((key, value) => value == null),",
      "    );",
      "  }",
      "",
      "  Future<void> delete(String id) {",
      "    return _http.delete(ApiEndpoints.${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}/}.withId(id));",
      "  }",
      "}",
      "",
      "final ${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}RepositoryProvider/} = Provider<${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Repository/}>((ref) {",
      "  return ${TM_FILENAME_BASE/^(.+)_repository$/${1:/pascalcase}Repository/}(ref.watch(httpClientRepositoryProvider));",
      "});",
      "",
      "  Future<void> enable(String id) {",
      "    return _http.post(ApiEndpoints.${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}/}.withSubPath(\"enable\", id: id));",
      "  }",
      "",
      "  Future<void> disable(String id) {",
      "    return _http.post(ApiEndpoints.${TM_FILENAME_BASE/^(.+)_repository$/${1:/camelcase}/}.withSubPath(\"disable\", id: id));",
      "  }",
    ],
    "description": "Generates a Riverpod repository class based on filename",
  },
}
