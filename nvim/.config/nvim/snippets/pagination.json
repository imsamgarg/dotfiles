{
  "Paging Controller": {
    "prefix": "paging-controller",
    "body": [
      "  PagingController<int,$1>? pagingController =",
      "     PagingController<int,$1>(firstPageKey: 0);",
      "",
      " @override",
      " void initState() {",
      "pagingController?.addPageRequestListener(",
      "(page) => _fetchPage(page).catchError((e) => pagingController?.error = e),",
      ");",
      "   super.initState();",
      " }",
      "",
      " @override",
      " void dispose() {",
      "   pagingController?.dispose();",
      "   pagingController = null;",
      "   super.dispose();",
      " }",
      "",
      " Future<void> _fetchPage(int pageKey) async {",
      "   const limit = 10;",
      "    final List<$1> list = await [];",
      "   if (list.length < limit) {",
      "     pagingController?.appendLastPage(list);",
      "   } else {",
      "     pagingController?.appendPage(list, pageKey + 1);",
      "   }",
      " }",
      " Future<void> refresh() async {",
      "   pagingController?.refresh();",
      " }"
    ]
  },
  "State Paging Controller": {
    "prefix": "state-paging-controller",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "import 'package:infinite_scroll_pagination/infinite_scroll_pagination.dart';",
      " ",
      "class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StateNotifier<void> {",
      " ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(this._ref):_repo=_ref.watch(${TM_FILENAME_BASE/(.*)_list_controller/${1:/camelcase}/}RepositoryProvider),super(const AsyncData(null)){_init();}",
      " final ${TM_FILENAME_BASE/(.*)_list_controller/${1:/pascalcase}/}Repository _repo;",
      " final AutoDisposeRef _ref;",
      "",
      "  PagingController<int,$1>? pagingController =",
      "     PagingController<int,$1>(firstPageKey: 0);",
      "",
      " void _init() {",
      "pagingController?.addPageRequestListener(",
      "(page) => _fetchPage(page).catchError((e) => pagingController?.error = e),",
      ");",
      " }",
      "",
      " @override",
      " void dispose() {",
      "   pagingController?.dispose();",
      "   pagingController = null;",
      "   super.dispose();",
      " }",
      "",
      " Future<void> _fetchPage(int pageKey) async {",
      "   const limit = 10;",
      "    final List<$1> list = await [];",
      "   if (list.length < limit) {",
      "     pagingController?.appendLastPage(list);",
      "   } else {",
      "     pagingController?.appendPage(list, pageKey + 1);",
      "   }",
      " }",
      " Future<void> refresh() async {",
      "   pagingController?.refresh();",
      " }",
      "}",
      "final ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Provider= ",
      "StateNotifierProvider.autoDispose<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/},void>((ref){",
      "return ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(ref);",
      "});"
    ]
  },
  "Paged View": {
    "prefix": "paged-view",
    "body": [
      "Paged$1View.separated(",
      "    pagingController: _pagingController!,",
      "    builderDelegate: PagedChildBuilderDelegate(",
      "      itemBuilder: (context, item, index) {",
      "        return  $2;",
      "      },",
      "    ),",
      "    separatorBuilder: (context, index) {",
      "      return const SizedBox(height: 12);",
      "    },",
      ")"
    ]
  }
}
