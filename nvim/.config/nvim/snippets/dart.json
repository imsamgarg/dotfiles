{
  "TextEditingController": {
    "prefix": "tec",
    "body": ["late final $1Controller = TextEditingController();"],
    "description": "Create TextEditingController"
  },
  "ValueNotifierController": {
    "prefix": "vec",
    "body": ["late final $1Controller = ValueNotifier($2);"],
    "description": "Create TextEditingController"
  },
  "Return if not mounted": {
    "prefix": "rnm",
    "body": "if (!mounted) return;"
  },
  "Global Key": {
    "prefix": "form_key",
    "body": "late final _formKey = GlobalKey<FormState>();"
  },
  "Navigator": {
    "prefix": "nav",
    "body": "Navigator.of(context).$1"
  },
  "Nav pop": {
    "prefix": "pop",
    "body": "Navigator.pop(context);"
  },
  "Scaffold Messenger": {
    "prefix": "sm",
    "body": "ScaffoldMessenger.of(context).$1"
  },
  "Assign Scaffold Messenger": {
    "prefix": "smv",
    "body": "final messenger = ScaffoldMessenger.of(context);"
  },
  "Snack Bar": {
    "prefix": "snackBar",
    "body": "ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('$1')));"
  },
  "Push Material Route": {
    "prefix": "push-material-route",
    "body": [
      "Navigator.push(",
      "  context,",
      "  MaterialPageRoute(builder: (context) {",
      "    return $1;",
      "  }),",
      ");"
    ]
  },
  "Validate Form": {
    "prefix": "valiate-form",
    "body": "if(!_formKey.currentState!.validate()) return;"
  },
  "Media Query": {
    "prefix": "mq",
    "body": "final mq = MediaQuery.of(context);"
  },
  "Media Query Size": {
    "prefix": "size",
    "body": "final size = MediaQuery.sizeOf(context);"
  },
  "Media Query Size Width Height": {
    "prefix": "size-w-h",
    "body": [
      "final size = MediaQuery.sizeOf(context);",
      "final h = size.height;",
      "final w = size.width;"
    ]
  },
  "Theme": {
    "prefix": "theme",
    "body": "final theme = Theme.of(context);"
  },
  "App Localization": {
    "prefix": "localization",
    "body": "final l10n = AppLocalizations.of(context)!;"
  },
  "Future Builder": {
    "prefix": "f-builder",
    "description": "",
    "body": [
      "FutureBuilder(",
      " future: $1,",
      " builder: (context, snapshot){",
      "  if(snapshot.hasError){",
      "    return Text('Something went wrong!!');",
      "  }",
      "   ",
      "  if(snapshot.hasData){",
      "    final data = snapshot.data;",
      "    return $2;",
      "  }",
      "   ",
      "  return const Center(child: CircularProgressIndicator());",
      " }",
      ")"
    ]
  },
  "Repository Method": {
    "prefix": "repo-http-method",
    "body": [
      "Future<void> $1()async {",
      "   final response = await _http.get(ApiEndpoints.$2);",
      "",
      "    return;",
      "}"
    ]
  },
  "Async Controller Method": {
    "prefix": "async-controller-method",
    "body": [
      "Future<ResultBase<void>> $1() async {",
      "  state = const AsyncLoading();",
      "  state = await AsyncValue.guard(() {",
      "    return _repo.$1();",
      "  });",
      "",
      "  return state.toResultWithData(null);",
      "}"
    ]
  },
  "Riverpod controller state": {
    "prefix": "r-state-controller",
    "body": [
      "final provider = $1;",
      "final state = ref.watch(provider);",
      "final controller = ref.watch(provider.notifier);"
    ]
  },
  "Post Frame CallBack": {
    "prefix": "post-frame-callback",
    "body": [
      "WidgetsBinding.instance.addPostFrameCallback((timeStamp) {",
      "   $1",
      "});"
    ]
  },
  "result": {
    "prefix": "result",
    "body": [
      "final result = await $1;",
      "if(!mounted) return;",
      "switch (result) {",
      " case Success(:final value):",
      " case Failure(:final exception):",
      "   context.showErrorPopup(exception);",
      "}"
    ]
  },
  "PrimaryButton": {
    "prefix": "primary-button",
    "body": [
      "FullWidthBox(",
      "  child: PrimaryButton(",
      "  onPressed: () {},",
      "  child: const Text('$2'),",
      "),",
      "),"
    ]
  },
  "ConsumerPrimaryButton": {
    "prefix": "consumer-primary-button",
    "body": [
      "Consumer(",
      "  builder: (context, ref, child) {",
      "    final controller = ref.watch($1Provider.notifier);",
      "    final state = ref.watch($1Provider);",
      "    return FullWidthBox(",
      "      child: PrimaryButton(",
      "        onPressed: () => _submit(controller),",
      "        isLoading: state.isLoading,",
      "        child: const Text('Submit'),",
      "      ),",
      "    );",
      "  },",
      "),"
    ]
  },
  "Confirm": {
    "prefix": "confirm",
    "body": [
      "final isConfirmed = await context.showConfirmationPopup(",
      "  \"Are you sure want to $1?\",",
      ");",
      "if (!isConfirmed) return;"
    ]
  },
  "FutureFunction": {
    "prefix": "future-function",
    "body": ["Future<void> $1() async {", "}"]
  }
}
